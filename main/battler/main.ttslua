--------------------------------------------------------------------------
--------------------------------------------------------------------------
---                                 .::.                               ---
---                               .;:**'            AMC                ---
---                               `                  0                 ---
---   .:XHHHHk.              db.   .;;.     dH  MX   0                 ---
--- oMMMMMMMMMMM       ~MM  dMMP :MMMMMR   MMM  MR      ~MRMN          ---
--- QMMMMMb  "MMX       MMMMMMP !MX' :M~   MMM MMM  .oo. XMMM 'MMM     ---
---   `MMMM.  )M> :X!Hk. MMMM   XMM.o"  .  MMMMMMM X?XMMM MMM>!MMP     ---
---    'MMMb.dM! XM M'?M MMMMMX.`MMMMMMMM~ MM MMM XM `" MX MMXXMM      ---
---     ~MMMMM~ XMM. .XM XM`"MMMb.~*?**~ .MMX M t MMbooMM XMMMMMP      ---
---      ?MMM>  YMMMMMM! MM   `?MMRb.    `"""   !L"MMMMM XM IMMM       ---
---       MMMX   "MMMM"  MM       ~%:           !Mh.""" dMI IMMP       ---
---       'MMM.                                             IMX        ---
---        ~M!M                                             IMP        ---
---                        MASTER TRAINER GALAXY                       ---
---                           BATTLE MODULE                           ---
--------------------------------------------------------------------------
--------------------------------------------------------------------------
-- This module handles battles and connects with the database.
-- It is used to handle primary variables and models (not UI.)
do
  Battle = {}
  logStyle("success", "Green")
  logStyle("error", "Red")
  logStyle("warning", "Yellow")

  local function tablecopy(orig) -- Required not to overwrite tables
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
      copy = {}
      for orig_key, orig_value in pairs(orig) do
        copy[orig_key] = orig_value
      end
    else -- number, string, boolean, etc
      copy = orig
    end
    return copy
  end

  local default_values = {
    weather = "clear",
    stage = "setup",
    teams = {}
  }

  local memory = tablecopy(default_values)

  function Battle.start(teams)
    if not teams then log("teams are needed to start the match", "", "error") end
    local loaded_teams = {}

    if memory.stage ~= "setup" then
      log("Battle.start failed: wrong stage", "", "error")
      return nil
    end

    for x, d in pairs(teams) do
      for _, d in pairs(d["pkmn"]) do
        if not d.chp or not d.maxhp or not gmtD["JSON"]["pkmn"][d.pkmn] then -- Verify data works
          log("battle.start failed: bad data", "", "error")
          if not d.chp then
            log("expected chp, got nil", "", "error")
          elseif not d.maxhp then
            log("expected maxhp, got nil", "", "error")
          elseif not gmtD["JSON"]["pkmn"][d.pkmn] then
            log("could not find Pokemon in database", "", "error")
          end
          return nil
        end
      end
    end


    memory.teams = teams
    memory.stage = "battle"
    log("Battle module: battle started", "", "success")
    return nil
  end

  function Battle.setAction(player, action)
    if memory.stage ~= "battle" then
      log("Cannot set action outside of battle stage", "", "error")
      return nil
    end
    memory["teams"][player]["action"] = action

    log("Player ".. player .. " set next action to ".. action, "", "success")
  end

  function Battle.setMove(player, move, pkmnid)
    if memory.stage ~= "battle" then
      log("Cannot set move outside of battle stage", "", "error")
    end
    local team = memory["teams"][player]
    local selected = team["selected"]

    if not team["pkmn_selected"][pkmnid] then
      log("Pkmn'".. pkmnid .."' is not presently active", "", "error")
    end

    local pkmn = team["pkmn_selected"][pkmnid]["pkmn"]

    if gmtD["JSON"]["pkmn"][pkmn]["attacks"][move] then
      team["nextmove"] = move
    else
      log("Move does not exist in db", "", "error")
      return nil
    end
    log("Pokemon "..pkmn.."(".. pkmnid .. ") set move to ".. move, "", "success")
  end

  function Battle.setPkmn(player, pkmnid) -- Futureproofing for double battles
    if memory.stage ~= "battle" then
      log("Cannot set pkmn outside of battle stage", "", "error")
    end

    local team = memory["teams"][player]
    local pkmn = team["pkmn"][pkmnid]

    if not pkmn then
      log("move does not exist in db", "", "error")
      return nil
    end

    if not team["pkmn_selected"] then team["pkmn_selected"] = {} end

    team["pkmn_selected"][pkmnid] = pkmn
    team["pkmn"][pkmnid] = nil
    log("Pokemon ".. team["pkmn_selected"][pkmnid]["pkmn"].."(" .. pkmnid .. ") added to " .. player .. "'s active Pokemon", "", "success")
  end

  -- Action note:
  -- Regardless of # of Pkmn, you can only do one action.

  function Battle.nextRound(debug)
    if not debug then debug = false end
    if memory.stage ~= "battle" then
      log("nextRound can only be used during battle phase", "", "error")
      return nil
    end

    memory.stage = "round"

    Battle.round = coroutine.create(function ()
      for x, d in pairs(memory.teams) do
      if d.action == "attack" then
        Battle.attack(x)
        coroutine.yield()
      elseif d.action == "item" then
        Battle.useItem(x)
        coroutine.yield()
      elseif d.action == "switch" then
        Battle.switchPkmn(x)
        coroutine.yield()
      elseif d.action == "forfeit" then
        Battle.forfeit(x)
        coroutine.yield()
      end
    end end )
    coroutine.resume(Battle.round)
  end

  function Battle.attack(team)
    Wait.time(|| coroutine.resume(Battle.round), 2)
  end

  function Battle.useItem(team)
  end

  function Battle.switchPkmn(team)
  end

  function Battle.forfeit(team)
  end


end
