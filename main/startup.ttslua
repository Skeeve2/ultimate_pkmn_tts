-- This file includes functions for managing the main menu and the "start" of the game. (The initial first load)
-- TODO polish!
function firstLoad() -- TODO These should be loaded from the scene manager EXCEPT options, which is always active
  new_game = getObjectFromGUID("49edc2")
  changelog = getObjectFromGUID("ab1086")
  options = getObjectFromGUID("38c20e")
  credits = getObjectFromGUID("0dc88f")

  -- Move modules off-map
  options.setPosition({200, 200, 200})
  credits.setPosition({200, 200, 200})
  changelog.setPosition({200, 200, 200})
  new_game.setPosition({200, 200, 200})
  bgm_player.setPosition({200, 200, 200})
  fx_master.setPosition({200, 200, 200})
  loadScene(scene.main_menu, true)

table.insert(BGM_VOLUME, extractChild(bgm_player, {"Cube(Clone)","bgm01"}).getComponent("AudioSource"))

for _, d in pairs(extractChild(fx_master, {"FXMaster(Clone)"}).getChildren()) do
  table.insert(FX_VOLUME, d.getComponent("AudioSource"))
end

  -- Wait for scene to have loaded
  Wait.condition(function()
    if MUSIC == true then
       Wait.time(function() bgm_player.AssetBundle.playLoopingEffect(1) end, 2)
     end

    cameraLock({0, 2.0, 10.94}, 0, 180, 0.01) -- Where the camera is locked to. One day make this animated.

    Wait.time(function()
      Wait.time(function() self.UI.setAttribute("debug_start", "active", "true") end, 1)
      scene_objects[2].AssetBundle.playLoopingEffect(1)
    end, 3)
   end, GameloadWatch)
end

function startScreen()
  scene_objects[2].AssetBundle.playLoopingEffect(2)
  self.UI.setAttribute("debug_start", "active", "false")
  mainMenuLoop(1)
  Wait.time(function()  self.UI.show("mainmenu") end, 0.50)
end

-------------------------------
-- Main Menu UI Functions
-------------------------------
-- Play a looping effect on all main menu options
function mainMenuLoop(x)
  new_game.AssetBundle.playLoopingEffect(x)
  options.AssetBundle.playLoopingEffect(x)
  changelog.AssetBundle.playLoopingEffect(x)
  credits.AssetBundle.playLoopingEffect(x)
end

-- Main menu
function mainMenuAnimationEnter(_, _, x)
  if x == "newgame" then
    new_game.AssetBundle.playLoopingEffect(2)
  elseif x == "changelog" then
    changelog.AssetBundle.playLoopingEffect(2)
  elseif x == "options" then
    options.AssetBundle.playLoopingEffect(2)
  elseif x == "credits" then
    credits.AssetBundle.playLoopingEffect(2)
  end
end

function mainMenuAnimationExit(_, _, x)
  if x == "newgame" then
    new_game.AssetBundle.playLoopingEffect(3)
  elseif x == "changelog" then
    changelog.AssetBundle.playLoopingEffect(3)
  elseif x == "options" then
    options.AssetBundle.playLoopingEffect(3)
  elseif x == "credits" then
    credits.AssetBundle.playLoopingEffect(3)
  end
end

-- New Game
function mainMenuNewGame()
self.UI.hide("mainmenu")
Wait.time(function()
scene_objects[2].AssetBundle.playLoopingEffect(0) -- Logo off
scene_objects[4].AssetBundle.playLoopingEffect(1) -- BG
scene_objects[3].AssetBundle.playLoopingEffect(1) -- Foreground
mainMenuLoop(0)
Wait.time(function() self.UI.show("menuSelection") end, 0.50)
end, 0.50)
Wait.time(function() scene_objects[5].AssetBundle.playLoopingEffect(0) end, 1) -- Reset screen wipe state
scene_objects[5].AssetBundle.playLoopingEffect(1) -- Screen wipe
end

function mainMenuNewGameBack()
  self.UI.hide("menuSelection")
Wait.time(function()
scene_objects[4].AssetBundle.playLoopingEffect(0) -- BG
scene_objects[3].AssetBundle.playLoopingEffect(0) -- Foreground
scene_objects[2].AssetBundle.playLoopingEffect(4) -- Logo on
mainMenuLoop(1)
Wait.time(function() self.UI.show("mainmenu") end, 0.50)
end, 0.50)
Wait.time(function() scene_objects[5].AssetBundle.playLoopingEffect(0) end, 1) -- Reset screen wipe state
scene_objects[5].AssetBundle.playLoopingEffect(1) -- Screen wipe
end

-- Options
function mainMenuOptionsOpen()
  playSound(1)
  self.UI.show("optionsMenu")
  self.UI.hide("mainmenu")
  mainMenuLoop(0)
  scene_objects[2].AssetBundle.playLoopingEffect(0)
end

function optionsSetVolume(_,vol,id)
 setVolume(id,vol)
end

function mainMenuOptionsClose()
  playSound(2)
  self.UI.hide("optionsMenu")
  Wait.time(function() self.UI.show("mainmenu") end, 0.50)
  Wait.time(function() scene_objects[2].AssetBundle.playLoopingEffect(4) end, 0.10)
  mainMenuLoop(1)
end

-- Changelog
function mainMenuChangelogOpen()
  playSound(1)
  local function webCallback(returned)
    if returned.is_error == false then
      self.UI.setAttribute("changelogtext", "Text", "Save version: ".. SAVEVERSION .. "\n" .. returned.text)
    else
      self.UI.setAttribute("changelogtext", "Text", "There was an error retrieving the latest changelog, please try again later.")
    end
  end

  self.UI.show("changelogmenu")
  self.UI.hide("mainmenu")
  WebRequest.get("https://raw.githubusercontent.com/Skeeve2/ultimate_pkmn_tts/master/changelog", function(a) webCallback(a) end)
  mainMenuLoop(0)
end

function mainMenuChangelogClose()
  playSound(2)
  self.UI.hide("changelogmenu")
  Wait.time(function()  endself.UI.show("mainmenu") end, 0.50)
  mainMenuLoop(1)
end

-- Scene Selection
-- When
function ssMenuMap(_,_,id)
  if id == "Battle_Simulator" then
    self.UI.hide("menuSelection")
    scene_objects[4].AssetBundle.playLoopingEffect(0)
    scene_objects[3].AssetBundle.playLoopingEffect(0)
    scene_objects[2].AssetBundle.playLoopingEffect(0)
    loadScene(battle_simulator, false ,scene_objects)
    CAMERALOCK = false
    Wait.frames(function() cameraMove({16.82, 0, -64.05}, 25, 25, 5) end, 10)
  else
  end
end
