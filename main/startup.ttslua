--- Starts a new game after the scene has loaded
function firstLoad()
  new_game = getObjectFromGUID("49edc2")
  changelog = getObjectFromGUID("ab1086")
  options = getObjectFromGUID("38c20e")
  credits = getObjectFromGUID("0dc88f")

  -- Move modules off-map
  options.setPosition({200, 200, 200})
  credits.setPosition({200, 200, 200})
  changelog.setPosition({200, 200, 200})
  new_game.setPosition({200, 200, 200})
  bgm_player.setPosition({200, 200, 200})
  fx_master.setPosition({200, 200, 200})
  loadScene(main_menu, true)

table.insert(BGM_VOLUME, extractChild(bgm_player, {"Cube(Clone)","bgm01"}).getComponent("AudioSource"))

for x, d in pairs(extractChild(fx_master, {"FXMaster(Clone)"}).getChildren()) do
  table.insert(FX_VOLUME, d.getComponent("AudioSource"))
end

  -- Wait for scene to have loaded
  Wait.condition(function()
    if MUSIC == true then
       Wait.time(|| bgm_player.AssetBundle.playLoopingEffect(1), 2)
     end

    cameraLock({-0.25, 5.0, 10.94}, 0, 180, 0.01)

    Wait.time(function()
      Wait.time(||self.UI.setAttribute("debug_start", "active", "true"), 1)
      scene_objects[2].AssetBundle.playLoopingEffect(1)
    end, 3)
   end, GameloadWatch)
end

function startScreen()
  scene_objects[2].AssetBundle.playLoopingEffect(2)
  self.UI.setAttribute("debug_start", "active", "false")
  mainMenuLoop(1)
  Wait.time(|| self.UI.show("mainmenu"), 0.50)
end

-------------------------------
-- Main Menu UI Functions
-------------------------------
-- Play a looping effect on all main menu options
function mainMenuLoop(x)
  new_game.AssetBundle.playLoopingEffect(x)
  options.AssetBundle.playLoopingEffect(x)
  changelog.AssetBundle.playLoopingEffect(x)
  credits.AssetBundle.playLoopingEffect(x)
end

-- Main menu
function mainMenuAnimationEnter(_, _, x)
  if x == "newgame" then
    new_game.AssetBundle.playLoopingEffect(2)
  elseif x == "changelog" then
    changelog.AssetBundle.playLoopingEffect(2)
  elseif x == "options" then
    options.AssetBundle.playLoopingEffect(2)
  elseif x == "credits" then
    credits.AssetBundle.playLoopingEffect(2)
  end
end

function mainMenuAnimationExit(_, _, x)
  if x == "newgame" then
    new_game.AssetBundle.playLoopingEffect(3)
  elseif x == "changelog" then
    changelog.AssetBundle.playLoopingEffect(3)
  elseif x == "options" then
    options.AssetBundle.playLoopingEffect(3)
  elseif x == "credits" then
    credits.AssetBundle.playLoopingEffect(3)
  end
end

-- New Game
function mainMenuNewGame()
  local function loaded()
    self.UI.setAttribute("debug_start", "active", "false")

    for _, player in ipairs(Player.getPlayers()) do
      player.lookAt({
        position = {0.37, 0, - 24.74},
        pitch = 25,
        yaw = 150,
        distance = 50,
      })
    end
  end
  CAMERALOCK = false
  self.UI.hide("mainmenu")
  mainMenuLoop(0)
  scene_objects[2].destruct() -- Delete early as it's not properly in the render queue
  table.remove(scene_objects, 2)
  loadScene(battle_arena_130, false, scene_objects)
  Wait.condition(loaded, not GameloadWatch)
end

-- Options
function mainMenuOptionsOpen()
  playSound(1)
  self.UI.show("optionsMenu")
  self.UI.hide("mainmenu")
  mainMenuLoop(0)
  scene_objects[2].AssetBundle.playLoopingEffect(0)
end

function optionsSetVolume(_,vol,id)
 setVolume(id,vol)
end

function mainMenuOptionsClose()
  playSound(2)
  self.UI.hide("optionsMenu")
  Wait.time(|| self.UI.show("mainmenu"), 0.50)
  mainMenuLoop(1)
  scene_objects[2].AssetBundle.playLoopingEffect(2)
end

-- Changelog
function mainMenuChangelogOpen()
  playSound(1)
  local function webCallback(returned)
    if returned.is_error == false then
      self.UI.setAttribute("changelogtext", "Text", returned.text)
    else
      self.UI.setAttribute("changelogtext", "Text", "There was an error retrieving the latest changelog, please try again later.")
    end
  end

  self.UI.show("changelogmenu")
  self.UI.hide("mainmenu")
  WebRequest.get("https://raw.githubusercontent.com/Skeeve2/ultimate_pkmn_tts/master/changelog", function(a) webCallback(a) end)
  mainMenuLoop(0)
end

function mainMenuChangelogClose()
  playSound(2)
  self.UI.hide("changelogmenu")
  Wait.time(|| self.UI.show("mainmenu"), 0.50)
  mainMenuLoop(1)
end
